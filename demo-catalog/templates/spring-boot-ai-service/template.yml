apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: spring-ai-rag
  title: Spring AI Service
  description: Spring Boot using Java and Gradle with Spring AI integration to build LLM-powered applications with RAG and tools.
  annotations:
    backstage.io/time-saved: PT12H
  tags:
    - recommended
    - java
    - spring-boot
    - ai
spec:
  owner: arconia
  type: service

  parameters:
    - title: Application Information
      required:
        - name
        - description
        - owner
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:field: EntityNamePicker
          maxLength: 63
        description:
          title: Description
          type: string
          description: Short explanation of what this service is for
          ui:options:
            rows: 5
          default: LLM-powered application with RAG capabilities.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: [Group, User]

    - title: Application Repository Information
      required:
        - repoUrl
        - repoBranch
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:autofocus: true
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
        repoBranch:
          title: Repository Default Branch
          type: string
          default: main

    - title: Java Project Metadata
      required:
        - groupId
        - artifactId
        - basePackage
      properties:
        groupId:
          title: Group
          type: string
          description: Maven Group ID (e.g. io.kadras)
          ui:autofocus: true
          default: io.kadras
        artifactId:
          title: Artifact
          type: string
          description: Maven Artifact ID (e.g. demo)
          default: demo
        basePackage:
          title: Base Package
          type: string
          description: Base name for the Java package (e.g. io.kadras.demo)
          default: io.kadras.demo
    
    - title: Application Dependencies
      required:
        - llmProvider
      properties:
        llmProvider:
          title: LLM Provider
          type: string
          description: Choose the large language model provider to integrate with
          ui:autofocus: true
          default: mistral-ai
          enum:
            - anthropic
            - mistral-ai
            - ollama
            - openai
          enumNames:
            - "Anthropic"
            - "Mistral AI"
            - "Ollama"
            - "OpenAI"
        vectorStore:
          title: Vector Store
          type: string
          description: Choose the vector store to integrate with
          default: postgresql
          enum:
            - chroma
            - postgresql
            - weaviate
          enumNames:
            - "ChromaDB"
            - "PostgreSQL"
            - "Weaviate"

    - title: Deployment Information
      required:
        - workflowEngine
      properties:
        workflowEngine:
          title: Workflow Engine
          type: string
          description: Choose the workflow engine to use for setting up pipelines
          ui:autofocus: true
          default: githubActions
          enum:
            - githubActions
            - tektonPipelines
          enumNames:
            - "GitHub Actions"
            - "Tekton Pipelines"
  
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./base
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          repoUrl: ${{ parameters.repoUrl | parseRepoUrl }}
          groupId: ${{ parameters.groupId }}
          artifactId: ${{ parameters.artifactId }}
          basePackage: ${{ parameters.basePackage }}
          basePackageDir: ${{ parameters.basePackage | replace(".", "/") }}
          llmProvider: ${{ parameters.llmProvider }}
          vectorStore: ${{ parameters.vectorStore }}

    - id: publish
      name: Publish Application Repository
      action: publish:github
      input:
        repoUrl: ${{ parameters.repoUrl }}
        allowedHosts: ['github.com']
        allowRebaseMerge: false
        allowSquashMerge: false
        defaultBranch: ${{ parameters.repoBranch }}
        deleteBranchOnMerge: true
        description: ${{ parameters.description }}
        dismissStaleReviews: true
        gitAuthorName: ${{ user.entity.spec.profile.displayName }}
        gitAuthorEmail: ${{ user.entity.spec.profile.email }}
        gitCommitMessage: "Initial commit"
        repoVisibility: public
        requireBranchesToBeUpToDate: true
        requiredCommitSigning: true
        requiredConversationResolution: true
        topics:
          - java
          - spring-boot
          - spring-ai
          - ai
          - large-language-models
          - retrieval-augmented-generation

    - id: register
      name: Register Catalog Entity
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yml"
    
    - id: sonarcloud
      name: Register project on SonarCloud
      action: http:backstage:request
      input:
        method: 'POST'
        path: '/proxy/sonarqube/projects/create?name=${{ (parameters.repoUrl | parseRepoUrl).repo }}&organization=${{ (parameters.repoUrl | parseRepoUrl).owner }}&project=${{ (parameters.repoUrl | parseRepoUrl).owner }}_${{ (parameters.repoUrl | parseRepoUrl).repo }}'
        headers:
          content-type: 'application/json'

  output:
    links:
      - title: Open Application Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open Application in Portal
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
    text:
    - title: Getting Started
      content: |
        1. `git clone ${{ steps['publish'].output.remoteUrl }}`
        2. `cd ${{ (parameters.repoUrl | parseRepoUrl).repo }}`
        3. `./gradlew bootTestRun`
