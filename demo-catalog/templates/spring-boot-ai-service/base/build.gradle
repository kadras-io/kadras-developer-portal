plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0-M3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.cyclonedx.bom' version '2.2.0'
	id 'org.sonarqube' version '6.1.0.5360'
}

group = '${{ values.groupId }}'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(23)
	}
}

repositories {
	mavenCentral()
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('arconiaVersion', "0.7.0")
	set('springAiVersion', "1.0.0-M6")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.springframework.ai:spring-ai-markdown-document-reader'

	implementation 'io.arconia:arconia-opentelemetry-spring-boot-starter'

	{% if values.llmProvider == "mistral-ai" %}
	implementation 'org.springframework.ai:spring-ai-mistral-ai-spring-boot-starter'
	{%- endif %}
	{% if values.llmProvider == "ollama" %}
	implementation 'org.springframework.ai:spring-ai-ollama-spring-boot-starter'
	testAndDevelopmentOnly 'io.arconia:arconia-dev-service-ollama'
	{%- endif %}
	{% if values.vectorStore == "postgresql" %}
	implementation 'org.springframework.ai:spring-ai-pgvector-store-spring-boot-starter'
	implementation 'org.springframework:spring-jdbc'
	implementation 'net.ttddyy.observation:datasource-micrometer-spring-boot:1.1.0'
	testAndDevelopmentOnly 'io.arconia:arconia-dev-service-postgresql'
	{%- endif %}
	implementation "org.springframework.ai:spring-ai-spring-cloud-bindings"

	testAndDevelopmentOnly 'org.springframework.boot:spring-boot-devtools'
	testAndDevelopmentOnly 'io.arconia:arconia-dev-service-opentelemetry-lgtm'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework:spring-webflux'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "io.arconia:arconia-bom:${arconiaVersion}"
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('bootBuildImage') {
	builder = "paketobuildpacks/builder-noble-java-tiny"
}

sonar {
	properties {
		property "sonar.projectKey", "${{ values.repoUrl.owner }}_${{ values.repoUrl.repo }}"
		property "sonar.organization", "${{ values.repoUrl.owner }}"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}
