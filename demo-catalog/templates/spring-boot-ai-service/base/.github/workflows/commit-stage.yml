name: Commit Stage

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.editorconfig'
      - '.gitignore'
      - '.sdkmanrc'
      - '*.adoc'
      - '*.png'
      - '*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/*.md'
      - '.github/*.yml'
      - '.github/*.yaml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ values.repoUrl.owner | lower }}/${{ values.repoUrl.repo }}
  VERSION: ${{ '${{ github.sha }}' }}

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Check out source code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      
      - name: Set up Java
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0
        with:
          java-version: 23
          distribution: 'graalvm'
      
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@06832c7b30a0129d7fb559bcc6e43d26f6374244 # v4.3.1

      - name: Compile and test
        run: ./gradlew build sonar
        env:
          SONAR_TOKEN: ${{ '${{ secrets.SONAR_TOKEN }}' }}
      
      - name: Publish SBOM
        uses: DependencyTrack/gh-upload-sbom@48feab3080ff9e8f51f4d21861d9fc914eb744f5 # v3.1.0
        #if: ${{ '${{ !contains(github.ref_name, '/') }}' }}
        with:
          serverHostname: ${{ '${{ secrets.DEPENDENCY_TRACK_HOSTNAME }}' }}
          apiKey: ${{ '${{ secrets.DEPENDENCY_TRACK_API_KEY }}' }}
          projectName: ${{ '${{ github.event.repository.name }}' }}
          projectVersion: ${{ '${{ github.ref_name }}' }}
          projectTags: 'java,spring-boot'
          bomFilename: "build/reports/application.cdx.json"
          autoCreate: true

      - name: Package as OCI image
        run: ./gradlew bootBuildImage --imageName ${{ '${{ env.REGISTRY }}' }}/${{ '${{ env.IMAGE_NAME }}' }}:${{ '${{ env.VERSION }}' }}

      - name: Authenticate with the container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ '${{ github.actor }}' }}
          password: ${{ '${{ secrets.GITHUB_TOKEN }}' }}
          registry: ${{ '${{ env.REGISTRY }}' }}

      - name: Publish OCI image
        run: |
          docker tag ${{ '${{ env.REGISTRY }}' }}/${{ '${{ env.IMAGE_NAME }}' }}:${{ '${{ env.VERSION }}' }} ${{ '${{ env.REGISTRY }}' }}/${{ '${{ env.IMAGE_NAME }}' }}:latest
          docker push ${{ '${{ env.REGISTRY }}' }}/${{ '${{ env.IMAGE_NAME }}' }}:${{ '${{ env.VERSION }}' }}
          docker push ${{ '${{ env.REGISTRY }}' }}/${{ '${{ env.IMAGE_NAME }}' }}:latest

  sign:
    name: Sign
    runs-on: ubuntu-24.04
    needs: [ build ]
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image-digest: ${{ '${{ steps.image-info.outputs.digest }}' }}
      image-name: ${{ '${{ steps.image-info.outputs.name }}' }}
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1

      - uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1.7
        with:
          username: ${{ '${{ github.actor }}' }}
          password: ${{ '${{ secrets.GITHUB_TOKEN }}' }}
          registry: ${{ '${{ env.REGISTRY }}' }}

      - name: Fetch OCI image
        run: podman pull ${{ '${{ env.REGISTRY }}' }}/${{ '${{ env.IMAGE_NAME }}' }}:${{ '${{ env.VERSION }}' }}

      - name: Get OCI image digest
        id: image-info
        run: |
          image_digest=$(podman inspect --format='{{.Digest}}' ${REGISTRY}/${IMAGE_NAME}:${VERSION})
          echo $image_digest
          echo "IMAGE_DIGEST=${image_digest}" >> $GITHUB_ENV
          echo "digest=${image_digest}" >> $GITHUB_OUTPUT
          echo "name=${REGISTRY}/${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Sign image
        run: |
          cosign sign --yes "${REGISTRY}/${IMAGE_NAME}@${IMAGE_DIGEST}"

  provenance:
    needs: [ sign ]
    permissions:
      actions: read
      id-token: write
      packages: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ '${{ needs.sign.outputs.image-name }}' }}
      digest: ${{ '${{ needs.sign.outputs.image-digest }}' }}
      registry-username: ${{ '${{ github.actor }}' }}
    secrets:
      registry-password: ${{ '${{ secrets.GITHUB_TOKEN }}' }}
