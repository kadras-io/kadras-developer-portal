app:
  title: Kadras Developer Portal
  baseUrl: http://localhost:3000

organization:
  name: Kadras

backend:
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  csp:
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    connect-src: ["'self'", 'http:', 'https:']
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      # https://node-postgres.com/features/ssl
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  autologout:
    enabled: false
  environment: development
  providers:
    github:
      development:
        clientId: ${GITHUB_AUTH_PROVIDER_CLIENT_ID}
        clientSecret: ${GITHUB_AUTH_PROVIDER_CLIENT_SECRET}

scaffolder:
  defaultAuthor:
    name: Kadras Developer Portal
    email: scaffolder@backstage.io
  defaultCommitMessage: 'Initial commit'

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    - type: url
      target: https://github.com/ThomasVitale/symphony-for-dev-and-platform/blob/main/platform/catalog/organization/catalog-info.yml
      rules:
        - allow: [User, Group, Location]

    - type: url
      target: https://github.com/ThomasVitale/symphony-for-dev-and-platform/blob/main/platform/catalog/templates/catalog-info.yml
      rules:
        - allow: [Template, Location]
